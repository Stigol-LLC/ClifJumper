using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Diagnostics;
using UnityEngine;

#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.Callbacks;
#endif

public static class FusePostProcess
{
    // Frameworks Ids  -  These ids have been generated by creating a project using Xcode then
    // extracting the values from the generated project.pbxproj.  The format of this
    // file is not documented by Apple so the correct algorithm for generating these
    // ids is unknown
    const string CORETELEPHONY_ID = "3F3EE17B1757FB570038DED5";
    const string ADSUPPORT_ID = "3F3EE1791757FB4D0038DED6";
	const string STOREKIT_ID = "3F3EE17D1757FB610038DED7";
	const string MESSAGEUI_ID = "2076D92010F4D46C00CEE78A";
	const string EVENTKIT_ID = "3FBCE7851816DD570057C056";
	const string EVENTKITUI_ID = "3FBCE7861816DD570057C058";
	const string TWITTER_ID = "3FBCE7861816DD570057C060";
	const string SOCIAL_ID = "3FBCE7861816DD570057C062";
	const string SECURITY_ID = "3FBCE7861816DD570057C065";
	const string CORETELEPHONY_FW = "3F3EE17B1757FB570038DED8";
    const string ADSUPPORT_FW = "3F3EE1791757FB4D0038DED9";
	const string STOREKIT_FW = "3F3EE17D1757FB610038DED0";
	const string MESSAGEUI_FW = "2076D92010F4D46C00CEE78B";
	const string EVENTKIT_FW = "3FBCE7851816DD570057C057";
	const string EVENTKITUI_FW = "3FBCE7861816DD570057C059";
	const string TWITTER_FW = "3F3EE17B1757FB570038DED9";
	const string SOCIAL_FW = "3F3EE17B1757FB570038DEEE";
	const string SECURITY_FW = "3F3EE17B1757FB570038DEED";
    
    // List of all the frameworks to be added to the project
    public struct framework
    {
        public string sName;
        public string sId;
        public string sFileId;
        
        public framework(string name, string myId, string fileid)
        {
            sName = name;
            sId = myId;
            sFileId = fileid;
        }
    }

#if UNITY_EDITOR
	/// Processbuild Function
    [PostProcessBuild] // <- this is where the magic happens
    public static void OnPostProcessBuild(BuildTarget target, string path)	
    {
		UnityEngine.Debug.Log("FusePostProcess Build Step - START");
		// iOS post-process
#if UNITY_IPHONE
        {			
            // 2: We init our tab and process our project
            framework[] myFrameworks = { new framework("CoreTelephony.framework", CORETELEPHONY_FW, CORETELEPHONY_ID),
										 new framework("AdSupport.framework", ADSUPPORT_FW, ADSUPPORT_ID),
										 new framework("StoreKit.framework", STOREKIT_FW, STOREKIT_ID),
										 new framework("MessageUI.framework", MESSAGEUI_FW, MESSAGEUI_ID),
										 new framework("EventKit.framework", EVENTKIT_FW, EVENTKIT_ID),
										 new framework("EventKitUI.framework", EVENTKITUI_FW, EVENTKITUI_ID),
										 new framework("Twitter.framework", TWITTER_FW, TWITTER_ID),
										 new framework("Social.framework", SOCIAL_FW, SOCIAL_ID),
										 new framework("Security.framework", SECURITY_FW, SECURITY_ID),
										};
			            
            string xcodeprojPath = EditorUserBuildSettings.GetBuildLocation(EditorUserBuildSettings.activeBuildTarget);			
		
			xcodeprojPath = xcodeprojPath + "/Unity-iPhone.xcodeproj";
			UnityEngine.Debug.Log("XcodeprojPath should be : "+xcodeprojPath);
			
            updateXcodeProject(xcodeprojPath, myFrameworks);			
        }
#endif // UNITY IPHONE
		
		UnityEngine.Debug.Log("FusePostProcess - STOP");
    }    
	
    [PostProcessScene] // <- for Android cleanup
	public static void OnPostProcessScene()
	{
#if UNITY_ANDROID
		if( Application.platform == RuntimePlatform.Android )
		{
			// delete older versions of API jar
			for( int i = 0; i < 10; i++ )
			{
				string oldAPIjar = "Assets/Plugins/Android/FuseAndroidAPI_v1.2" + i + ".jar";
				if(AssetDatabase.DeleteAsset(oldAPIjar))
				{
					//Debug.Log("Deleted obsolete API: " + oldAPIjar);
				}
			}
		}
#endif//UNITY_ANDROID
	}
#endif // UNITY_EDITOR

    // MAIN FUNCTION
    // xcodeproj_filename - filename of the Xcode project to change
    // frameworks - list of Apple standard frameworks to add to the project
	static bool bFoundCore = false;
	static bool bFoundAd = false;
	static bool bFoundStore = false;
	static bool bFoundMessage = false;
	static bool bFoundEvent = false;
	static bool bFoundEventUI = false;
	static bool bFoundTwitter = false;
	static bool bFoundSocial = false;
	static bool bFoundSecurity = false;
    public static void updateXcodeProject(string xcodeprojPath, framework[] listeFrameworks)
    {

		// STEP 1 : We open up the file generated by Unity and read into memory as
		// a list of lines for processing
		string project = xcodeprojPath + "/project.pbxproj";		
		if (!System.IO.File.Exists (project)) {
			UnityEngine.Debug.LogError ("Could not find Xcode project at the expected location.  You will need to manually add CoreTelephony, AdSupport, MessageUI, EventKit, EventKitUI, Twitter, Social, and StoreKit frameworks and the -ObjC linker flag");
				return;
		}


#if UNITY_IPHONE
//		Uncomment to Test xml project settings
//		ProcessStartInfo proc = new ProcessStartInfo();
//		proc.FileName = "plutil";
//		proc.WorkingDirectory = xcodeprojPath;
//		proc.Arguments = "-convert xml1 project.pbxproj";
//		proc.WindowStyle = ProcessWindowStyle.Minimized;
//		proc.CreateNoWindow = true;
//		Process process = Process.Start(proc);
//		process.WaitForExit();
//		UnityEngine.Debug.Log("Converting project.pbxProj to xml");
#endif


		string[] lines = System.IO.File.ReadAllLines (project);		

		// STEP 2 : We process only the missing frameworks

		bool isXML = (string.Compare (lines [0].Substring (2, 3), "xml") == 0) || (string.Compare (lines [0].Substring (2, 3), "Xml") == 0);

		int i = 0;        
		bool bEnd = false;
		while (!bEnd && i < lines.Length) {
				if (lines [i].Length > 5 && (string.Compare (lines [i].Substring (3, 3), "End") == 0) && !isXML)
						bEnd = true;

				if (lines [i].Contains ("CoreTelephony.framework")) {
						bFoundCore = true;
				} else if (lines [i].Contains ("AdSupport.framework")) {
						bFoundAd = true;
				} else if (lines [i].Contains ("StoreKit.framework")) {
						bFoundStore = true;
				} else if (lines [i].Contains ("MessageUI.framework")) {
						bFoundMessage = true;
				} else if (lines [i].Contains ("EventKit.framework")) {
						bFoundEvent = true;
				} else if (lines [i].Contains ("EventKitUI.framework")) {
						bFoundEventUI = true;
				} else if (lines [i].Contains ("Twitter.framework")) {
						bFoundTwitter = true;
				} else if (lines [i].Contains ("Social.framework")) {
						bFoundSocial = true;
				}
				else if( lines[i].Contains("Security.framework") )
				{
					bFoundSecurity = true;
				}

				++i;
		}		


		// STEP 3 : We'll open/replace project.pbxproj for writing and iterate over the old
		// file in memory, copying the original file and inserting every extra we need

		if (isXML) {

			UnityEngine.Debug.Log("project.pbxProj is xml, using XML script");
			XmlDocument projXml = new XmlDocument();
			projXml.PreserveWhitespace = true;
			projXml.LoadXml (System.IO.File.ReadAllText (project));

			XmlNode outerDict = null;
			XmlNode innerDict = null;

			foreach(XmlNode node in projXml.ChildNodes)
				if(node.Name == "plist")
					foreach(XmlNode child in node.ChildNodes)
						if(child.Name == "dict")
							outerDict = child;

			if(outerDict != null)
			{
				foreach(XmlNode node in outerDict.ChildNodes)
					if(node.Name == "dict" && node.HasChildNodes)
						innerDict = node;
			}

			if(innerDict != null)
			{
				foreach (framework fr in listeFrameworks)
				{
					add_build_file_xml (innerDict, fr.sId, fr.sName, fr.sFileId);
					add_framework_file_reference_xml (innerDict, fr.sFileId, fr.sName);
					add_frameworks_build_phase_xml (innerDict, fr.sId, fr.sName);
					add_group_xml (innerDict, fr.sFileId, fr.sName);
					
				}

				add_ldFlags_xml(innerDict,"-ObjC");



				FileStream filestr = new FileStream (project, FileMode.Create); //Create new file and open it for read and write, if the file exists overwrite it.
				filestr.Close ();
				projXml.Save(project);
				
				//this is gonna be a dirty, dirty hack.
				string[] lines2 = System.IO.File.ReadAllLines (project);
				lines2[1] = lines[1];
				UnityEngine.Debug.Log("fixing line: " +lines2[1]);
				filestr = new FileStream (project, FileMode.Create); //Create new file and open it for read and write, if the file exists overwrite it.
				filestr.Close ();
				StreamWriter fCurrentXcodeProjFile = new StreamWriter (project); // will be used for writing
				foreach (string line in lines2) {
					fCurrentXcodeProjFile.WriteLine (line); 
				}
				fCurrentXcodeProjFile.Close();
			}
			else
			{
				
				UnityEngine.Debug.Log("project.pbxProj is xml but not in expected format! Please contact fuse support for more information");

			}

		} else {

			FileStream filestr = new FileStream (project, FileMode.Create); //Create new file and open it for read and write, if the file exists overwrite it.
			filestr.Close ();
			StreamWriter fCurrentXcodeProjFile = new StreamWriter (project); // will be used for writing


			// As we iterate through the list we'll record which section of the
			// project.pbxproj we are currently in
			string section = "";

			// We use this boolean to decide whether we have already added the list of
			// build files to the link line.  This is needed because there could be multiple
			// build targets and they are not named in the project.pbxproj
			bool bFrameworks_build_added = false;
			int iNbBuildConfigSet = 0; // can't be > 2

			i = 0;
			foreach (string line in lines) {
					fCurrentXcodeProjFile.WriteLine (line);            
				
					//////////////////////////////////
					//  STEP 2 : Include Framewoks  //
					//////////////////////////////////                    
					// Each section starts with a comment such as : /* Begin PBXBuildFile section */'
					if (lines [i].Length > 7 && string.Compare (lines [i].Substring (3, 5), "Begin") == 0) {
							section = line.Split (' ') [2];
							//Debug.Log("NEW_SECTION: "+section);
							if (section == "PBXBuildFile") {
									foreach (framework fr in listeFrameworks)
											add_build_file (fCurrentXcodeProjFile, fr.sId, fr.sName, fr.sFileId);
							}

							if (section == "PBXFileReference") {
									foreach (framework fr in listeFrameworks)
											add_framework_file_reference (fCurrentXcodeProjFile, fr.sFileId, fr.sName);
							}

							if (line.Length > 5 && string.Compare (line.Substring (3, 3), "End") == 0)
									section = "";
					}
					// The PBXResourcesBuildPhase section is what appears in XCode as 'Link
					// Binary With Libraries'.  As with the frameworks we make the assumption the
					// first target is always 'Unity-iPhone' as the name of the target itself is
					// not listed in project.pbxproj
					if (section == "PBXFrameworksBuildPhase" &&
							line.Trim ().Length > 4 &&
							string.Compare (line.Trim ().Substring (0, 5), "files") == 0 &&
							!bFrameworks_build_added) {
							foreach (framework fr in listeFrameworks)
									add_frameworks_build_phase (fCurrentXcodeProjFile, fr.sId, fr.sName);
							bFrameworks_build_added = true;
					}

					// The PBXGroup is the section that appears in XCode as 'Copy Bundle Resources'.
					if (section == "PBXGroup" &&
							line.Trim ().Length > 7 &&
							string.Compare (line.Trim ().Substring (0, 8), "children") == 0 &&
							lines [i - 2].Trim ().Split (' ').Length > 0 &&
							string.Compare (lines [i - 2].Trim ().Split (' ') [2], "CustomTemplate") == 0) {						
							foreach (framework fr in listeFrameworks)
									add_group (fCurrentXcodeProjFile, fr.sFileId, fr.sName);
					}

					//////////////////////////////
					//  STEP 3 : Build Options  //
					//////////////////////////////
					if (section == "XCBuildConfiguration" &&
							line.StartsWith ("\t\t\t\tOTHER_LDFLAGS") &&
							iNbBuildConfigSet < 2) {
							int j = 0;
							bool bFlagSet = false;				
							while (string.Compare(lines[i+j].Trim(), "};") != 0) {
									if (lines [i + j].Contains ("ObjC")) {
											bFlagSet = true;
									}
									j++;
							}
							if (!bFlagSet) {
									//fCurrentXcodeProjFile.Write("\t\t\t\t\t\"-all_load\",\n");
									fCurrentXcodeProjFile.Write ("\t\t\t\t\t\"-ObjC\",\n");
									UnityEngine.Debug.Log ("OnPostProcessBuild - Adding \"-ObjC\" flag to build options"); // \"-all_load\" and
							}
							++iNbBuildConfigSet;
					}
					i++;					
			}
			fCurrentXcodeProjFile.Close();
		}
        


	}
	
	
	/////////////////
	///////////
    // ROUTINES
    ///////////
    /////////////////
    
    // check to see if the framework has already been processed
	private static bool should_process_framework(string name)
	{
		if( (bFoundCore && name.Equals("CoreTelephony.framework"))
			|| (bFoundAd && name.Equals("AdSupport.framework")) 
			|| (bFoundStore && name.Equals("StoreKit.framework"))
			|| (bFoundMessage && name.Equals("MessageUI.framework"))
			|| (bFoundEvent && name.Equals("EventKit.framework"))
			|| (bFoundEventUI && name.Equals("EventKitUI.framework"))
		    || (bFoundTwitter && name.Equals("Twitter.framework"))
		    || (bFoundSocial && name.Equals("Social.framework"))
		    || (bFoundSecurity && name.Equals("Security.framework")))
		{
			// framework is already in the xcode project - do no process it
			return false;
		}
		
		// the framework doesn't exist in the xcode project
		return true;
	}


	// Adds a entry for  PBXBuildFile section into an xml
	private static void add_build_file_xml(XmlNode innerDict, string id, string name, string fileref)
	{
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			//Debug.Log(name + " already exists in xcode project");
			return;
		}
		
		UnityEngine.Debug.Log("OnPostProcessBuild - Adding build file (xml) - " + name);
		XmlDocument doc = innerDict.OwnerDocument;

		XmlNode newChildKey = doc.CreateElement("key");
		newChildKey.InnerText = id;
		innerDict.AppendChild (newChildKey);

		XmlNode newChildDict = doc.CreateElement("dict");
		{
			XmlNode fileRefKeyNode = doc.CreateElement("key");
			fileRefKeyNode.InnerText = "fileRef";
			XmlNode fileRefNode = doc.CreateElement("string");
			fileRefNode.InnerText = fileref;
			
			newChildDict.AppendChild(fileRefKeyNode);
			newChildDict.AppendChild(fileRefNode);

			XmlNode isaKeyNode = doc.CreateElement("key");
			isaKeyNode.InnerText = "isa";
			XmlNode isaNode = doc.CreateElement("string");
			isaNode.InnerText = "PBXBuildFile";

			newChildDict.AppendChild(isaKeyNode);
			newChildDict.AppendChild(isaNode);

			XmlNode settingsKeyNode = doc.CreateElement("key");
			settingsKeyNode.InnerText = "settings";
			XmlNode settingsDictNode = doc.CreateElement("dict");
			XmlNode attribKeyNode = doc.CreateElement("key");
			attribKeyNode.InnerText = "ATTRIBUTES";
			settingsDictNode.AppendChild(attribKeyNode);
			XmlNode attribArrayNode = doc.CreateElement("array");
			XmlNode attribNode = doc.CreateElement("string");
			attribNode.InnerText = "Weak";
			attribArrayNode.AppendChild(attribNode);
			settingsDictNode.AppendChild(attribArrayNode);

			newChildDict.AppendChild(settingsKeyNode);
			newChildDict.AppendChild(settingsDictNode);
		}

		innerDict.AppendChild (newChildDict);
				
	}
	
	// Adds a line into the PBXBuildFile section
	private static void add_framework_file_reference_xml(XmlNode innerDict, string id, string name)
	{
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			return;
		}
		
		UnityEngine.Debug.Log("OnPostProcessBuild - Adding framework file reference (xml) - " + name);
		
		string path = "System/Library/Frameworks"; // all the frameworks come from here
		if (name == "libsqlite3.0.dylib")           // except for lidsqlite
			path = "usr/lib";

		XmlDocument doc = innerDict.OwnerDocument;
		
		XmlNode newChildKey = doc.CreateElement("key");
		newChildKey.InnerText = id;
		innerDict.AppendChild (newChildKey);
		
		XmlNode newChildDict = doc.CreateElement("dict");
		{
			
			XmlNode isaKeyNode = doc.CreateElement("key");
			isaKeyNode.InnerText = "isa";
			newChildDict.AppendChild(isaKeyNode);
			XmlNode isaNode = doc.CreateElement("string");
			isaNode.InnerText = "PBXFileReference";
			newChildDict.AppendChild(isaNode);

			XmlNode fileTypeKeyNode = doc.CreateElement("key");
			fileTypeKeyNode.InnerText = "lastKnownFileType";
			XmlNode fileTypeNode = doc.CreateElement("string");
			fileTypeNode.InnerText = "wrapper.framework";
			
			newChildDict.AppendChild(fileTypeKeyNode);
			newChildDict.AppendChild(fileTypeNode);

			XmlNode fileNameKeyNode = doc.CreateElement("key");
			fileNameKeyNode.InnerText = "name";
			newChildDict.AppendChild(fileNameKeyNode);
			XmlNode fileNameNode = doc.CreateElement("string");
			fileNameNode.InnerText = name;
			newChildDict.AppendChild(fileNameNode);


			XmlNode filePathKeyNode = doc.CreateElement("key");
			filePathKeyNode.InnerText = "path";
			XmlNode filePathNode = doc.CreateElement("string");
			filePathNode.InnerText = path + "/" + name;

			newChildDict.AppendChild(filePathKeyNode);
			newChildDict.AppendChild(filePathNode);

			XmlNode sourceTreeKeyNode = doc.CreateElement("key");
			sourceTreeKeyNode.InnerText = "sourceTree";
			XmlNode sourceTreeNode = doc.CreateElement("string");
			sourceTreeNode.InnerText = "SDKROOT";
			
			newChildDict.AppendChild(sourceTreeKeyNode);
			newChildDict.AppendChild(sourceTreeNode);

		}
		
		innerDict.AppendChild (newChildDict);
				
				
	}
	
	// Adds a line into the PBXFrameworksBuildPhase section
	private static void add_frameworks_build_phase_xml(XmlNode innerdict, string id, string name)
	{
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			return;
		}
		UnityEngine.Debug.Log("OnPostProcessBuild - Adding build phase (xml) - " + name);
		
		XmlDocument doc = innerdict.OwnerDocument;

		//Find Build phase sections
		XmlNode targetNode = null;
		foreach (XmlNode nodes in innerdict.ChildNodes) 
		{
			if(nodes.HasChildNodes && nodes.Name == "dict")
			{
				foreach (XmlNode node in nodes.ChildNodes) 
				{
					if(node.Name == "string" && node.InnerText == "PBXFrameworksBuildPhase")
					{
						targetNode = nodes;
						break;
					}
				}
			}
			if(targetNode != null)
			{
				break; 
			}
		}

		if (targetNode != null) 
		{
			XmlNode arrayNode = null;
			foreach (XmlNode node in targetNode.ChildNodes) 
			{
				if(node.Name == "array")
				{
					arrayNode = node;
					break;
				}
			}

			if(arrayNode != null)
			{
				XmlNode insert = doc.CreateElement("string");
				insert.InnerText = id;
				arrayNode.AppendChild(insert);
			}
		}
	}
	
	// Adds a line into the PBXGroup section
	private static void add_group_xml(XmlNode innerdict, string id, string name)
	{
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			return;
		}
		UnityEngine.Debug.Log("OnPostProcessBuild - Add group (xml) - " + name);
		
		XmlDocument doc = innerdict.OwnerDocument;

		//Find group section

		XmlNode targetNode = null;
		foreach (XmlNode nodes in innerdict.ChildNodes) 
		{
			if(nodes.HasChildNodes && nodes.Name == "dict")
			{
				foreach (XmlNode node in nodes.ChildNodes) 
				{
					if(node.Name == "string" && node.InnerText == "CustomTemplate")
					{
						targetNode = nodes;
						break;
					}
				}
			}
			if(targetNode != null)
			{
				break; 
			}
		}

		if (targetNode != null) 
		{
			XmlNode arrayNode = null;
			foreach (XmlNode node in targetNode.ChildNodes) 
			{
				if(node.Name == "array")
				{
					arrayNode = node;
					break;
				}
			}
			
			if(arrayNode != null)
			{
				XmlNode insert = doc.CreateElement("string");
				insert.InnerText = id;
				arrayNode.AppendChild(insert);
			}
		}
	}		


	private static void add_ldFlags_xml(XmlNode innerdict, string flag)
	{
		XmlDocument doc = innerdict.OwnerDocument;
		
		UnityEngine.Debug.Log("Inserting Link flag: " + flag );

		//Find group section
		
		XmlNode targetNode = null;

		foreach (XmlNode nodes in innerdict.ChildNodes) 
		{
			if(nodes.HasChildNodes && nodes.Name == "dict")
			{
				foreach (XmlNode node in nodes.ChildNodes) 
				{
					if(node.Name == "key" && node.InnerText == "buildSettings")
					{
						targetNode = nodes;
						break;
					}
				}
			}
			if(targetNode != null)
			{

				//We have found a target node, add ldFlag and proceed
				foreach (XmlNode node in targetNode.ChildNodes) 
				{
					if(node.HasChildNodes && node.Name == "dict")
					{
						bool processNextArray = false;
						foreach (XmlNode subnode in node.ChildNodes) 
						{
							if(processNextArray && subnode.Name == "array")
							{
								bool noExists = true;
								foreach (XmlNode arrayItem in subnode.ChildNodes) 
								{
									if(arrayItem.Name == "string" && arrayItem.InnerText == flag)
									{
										noExists = false;
									}
								}
								if(noExists)
								{
									XmlNode insert = doc.CreateElement("string");
									insert.InnerText = flag;
									subnode.AppendChild(insert);
								}
								processNextArray = false;
							}
							if(subnode.Name == "key" && subnode.InnerText == "OTHER_LDFLAGS")
							{
								processNextArray = true;
							}
						}
					}
				}

				targetNode = null;
			}
		}
	}


    // Adds a line into the PBXBuildFile section
    private static void add_build_file(StreamWriter file, string id, string name, string fileref)
    {
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			//Debug.Log(name + " already exists in xcode project");
			return;
		}
		
		UnityEngine.Debug.Log("OnPostProcessBuild - Adding build file " + name);
        string subsection = "Frameworks";
        
        // optional frameworks (currently all)
		file.Write("\t\t"+id+" /* "+name+" in "+subsection+" */ = {isa = PBXBuildFile; fileRef = "+fileref+" /* "+name+" */; settings = {ATTRIBUTES = (Weak, ); }; };\n");
//        else // required frameworks
//            file.Write("\t\t"+id+" /* "+name+" in "+subsection+" */ = {isa = PBXBuildFile; fileRef = "+fileref+" /* "+name+" */; };\n");
    }
    
    // Adds a line into the PBXBuildFile section
    private static void add_framework_file_reference(StreamWriter file, string id, string name)
    {
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			return;
		}
		
		UnityEngine.Debug.Log("OnPostProcessBuild - Adding framework file reference " + name);
        
        string path = "System/Library/Frameworks"; // all the frameworks come from here
        if (name == "libsqlite3.0.dylib")           // except for lidsqlite
            path = "usr/lib";
        
        file.Write("\t\t"+id+" /* "+name+" */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = "+name+"; path = "+path+"/"+name+"; sourceTree = SDKROOT; };\n");
    }
    
    // Adds a line into the PBXFrameworksBuildPhase section
    private static void add_frameworks_build_phase(StreamWriter file, string id, string name)
    {
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			return;
		}
		UnityEngine.Debug.Log("OnPostProcessBuild - Adding build phase " + name);
        
        file.Write("\t\t\t\t"+id+" /* "+name+" in Frameworks */,\n");
    }
    
    // Adds a line into the PBXGroup section
    private static void add_group(StreamWriter file, string id, string name)
    {
		// do not re-add the framework if it already exists in the xcode project
		if( !should_process_framework(name) )
		{
			return;
		}
		UnityEngine.Debug.Log("OnPostProcessBuild - Add group " + name);
        
        file.Write("\t\t\t\t"+id+" /* "+name+" */,\n");
    }	
}